// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/chat": {
            "post": {
                "description": "ask a question",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "ask a question",
                "parameters": [
                    {
                        "description": "body of asking a question",
                        "name": "param",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.askQuestionRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created"
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/controller.ResponseData"
                        }
                    }
                }
            }
        },
        "/v1/chat/models": {
            "get": {
                "description": "list all models",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Chat"
                ],
                "summary": "list all models",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/controller.ResponseData"
                        }
                    }
                }
            }
        },
        "/v1/job": {
            "get": {
                "description": "list jobs",
                "tags": [
                    "Finetune"
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controller.JobInfo"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "system_error"
                        }
                    }
                }
            },
            "post": {
                "description": "create finetune",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Finetune"
                ],
                "summary": "Create",
                "parameters": [
                    {
                        "description": "body of creating finetune",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.JobInfo"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/controller.JobInfo"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "system_error"
                        }
                    }
                }
            }
        },
        "/v1/job/{jobname}": {
            "delete": {
                "description": "delete finetune",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Finetune"
                ],
                "summary": "Delete",
                "parameters": [
                    {
                        "type": "string",
                        "description": "finetune id",
                        "name": "jobname",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "secret",
                        "name": "secret",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controller.Secret"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "system_error"
                        }
                    }
                }
            }
        },
        "/v1/log/{jobname}": {
            "get": {
                "description": "watch single finetune",
                "consumes": [
                    "application/json"
                ],
                "tags": [
                    "Finetune"
                ],
                "summary": "get a websocket to watch a finetune log",
                "parameters": [
                    {
                        "type": "string",
                        "description": "finetune id",
                        "name": "jobname",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "system_error"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controller.JobInfo": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "dataset": {
                    "type": "string"
                },
                "jobName": {
                    "type": "string"
                },
                "model": {
                    "type": "string"
                },
                "parameter": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "secret": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "controller.ResponseData": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "string"
                },
                "data": {},
                "msg": {
                    "type": "string"
                }
            }
        },
        "controller.Secret": {
            "type": "object",
            "properties": {
                "secret": {
                    "type": "string"
                }
            }
        },
        "controller.askQuestionRequest": {
            "type": "object",
            "required": [
                "model_name",
                "question"
            ],
            "properties": {
                "echo": {
                    "type": "boolean"
                },
                "max_new_tokens": {
                    "type": "integer"
                },
                "model_name": {
                    "type": "string"
                },
                "question": {
                    "type": "string"
                },
                "repetition_penalty": {
                    "type": "number"
                },
                "stop": {
                    "type": "string"
                },
                "stop_token_ids": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "temperature": {
                    "type": "number"
                },
                "top_p": {
                    "type": "number"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
